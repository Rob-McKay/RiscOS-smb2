/* -*-  mode:c; c-default-style "bsd" tab-width:8; c-basic-offset:4; indent-tabs-mode:nil;  -*- */
/*
 * Copyright 2023 Rob McKay
 *
 * This file is part of 'RISC OS libsmb2'
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "smb2Hdr.h"

#include <stdint.h>
#include <stddef.h>
#include <smb2/smb2.h>
#include <smb2/libsmb2.h>

#define SWI_OFFSET(x) ((SMB2_##x) - SMB2_00)

static _kernel_oserror *create_context(_kernel_swi_regs *regs)
{
    struct smb2_context *res = smb2_init_context();
    if (res != NULL)
    {
        regs->r[0] = (int)res;
        return NULL;
    }
    static _kernel_oserror err = {SMB2_00, "Cannot create context"};
    return &err;
}

static _kernel_oserror *destroy_context(_kernel_swi_regs *regs)
{
    smb2_destroy_context((struct smb2_context *) regs->r[0]);
    return NULL;
}

static _kernel_oserror *set_smb_version(_kernel_swi_regs *regs)
{
    smb2_set_version((struct smb2_context *) regs->r[0], (enum smb2_negotiate_version)regs->r[1]);
    return NULL;
}

static _kernel_oserror *set_security_mode(_kernel_swi_regs *regs)
{
    smb2_set_security_mode((struct smb2_context *) regs->r[0], regs->r[1]);
    return NULL;
}

_kernel_oserror *libsmb2_swi_handler(int swi_offset, _kernel_swi_regs *regs, void *pw)
{
    switch (swi_offset)
    {
    case SWI_OFFSET(CreateContext):
        return create_context(regs);

    case SWI_OFFSET(DestroyContext):
        return destroy_context(regs);

    case SWI_OFFSET(SetSMBVersion):
        return set_smb_version(regs);

    case SWI_OFFSET(SetSecurityMode):
        return set_security_mode(regs);

    default:
        return error_BAD_SWI;
    }
}
